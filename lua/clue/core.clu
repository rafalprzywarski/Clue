(ns clue.core)

(def new lua/clue.new)

(def not (fn [x] (if x false true)))

(def cons lua/clue.cons)
(def conj lua/clue.conj)
(def list lua/clue.list)
(def vector lua/clue.vector)
(def hash-map lua/clue.hash_map)
(def seq lua/clue.seq)
(def vec lua/clue.vec)
(def first lua/clue.first)
(def second lua/clue.second)
(def rest lua/clue.rest)
(def next lua/clue.next)
(def pr-str lua/clue.pr_str)
(def str lua/clue.str)
(def + lua/clue.op_add)
(def - lua/clue.op_sub)
(def * lua/clue.op_mul)
(def / lua/clue.op_div)
(def % lua/clue.op_mod)
(def = lua/clue.equals)
(def merge (fn [m1 m2] (. m1 (merge m2))))

(def type (fn [obj] (lua/clue.type obj)))
(def instance? (fn [cls obj] (lua/clue.identical cls (type obj))))
(def map? (fn [obj] (instance? lua/clue.HashMap obj)))
(def string? (fn [obj] (instance? "string" obj)))

(def with-meta (fn [obj m] (. obj (with_meta m))))

(def ^:macro defn (fn [name & fdecl]
    (let [
        m (if (string? (first fdecl)) {:doc (first fdecl)} {})
        fdecl (if (string? (first fdecl)) (next fdecl) fdecl)
        m (if (map? (first fdecl)) (merge m (first fdecl)) m)
        fdecl (if (map? (first fdecl)) (next fdecl) fdecl)]
        (list 'def (with-meta name m) (cons 'fn fdecl)))))

(def ^:macro defmacro (fn [name & fdecl]
    (let [
        m {:macro true}
        m (if (string? (first fdecl)) (merge m {:doc (first fdecl)}) m)
        fdecl (if (string? (first fdecl)) (next fdecl) fdecl)
        m (if (map? (first fdecl)) (merge m (first fdecl)) m)
        fdecl (if (map? (first fdecl)) (next fdecl) fdecl)]
        (list 'def (with-meta name m) (cons 'fn fdecl)))))

(defn extend [type proto methods] (. proto (extend type methods)))

(defn assoc [map k v] (. map (assoc k v)))

(defn nil?
    "Returns true if x is nil, false otherwise."
    [x] (= x nil))

(defn spread
    [args]
    (if (nil? args)
        nil
        (if (nil? (next args))
            (seq (first args))
            (cons (first args) (spread (next args))))))

(defn list*
    ([args] (seq args))
    ([a args] (cons a args))
    ([a b args] (cons a (cons b args)))
    ([a b c args] (cons a (cons b (cons c args))))
    ([a b c d & more] (cons a (cons b (cons c (cons d (spread more)))))))

(defn apply
    ([f args] ((. lua/clue apply_to) f (seq args)))
    ([f x args] ((. lua/clue apply_to) f (list* x args)))
    ([f x y args] ((. lua/clue apply_to) f (list* x y args)))
    ([f x y z args] ((. lua/clue apply_to) f (list* x y z args)))
    ([f a b c d & args] ((. lua/clue apply_to) f (cons a (cons b (cons c (cons d (spread args))))))))

(defn not= [& args] (not (apply = args)))

(defn some?
  "Returns true if x is not nil, false otherwise."
  [x] (not (nil? x)))

(defmacro lazy-seq
  "Takes an expressions that returns a sequence or nil, and yields
  a sequence that will invoke the body only the first time
  the returned sequence is used, and will cache the result
  and return it on all subsequent uses."
  [body] (list (list '. 'lua/clue 'lazy_seq) (list 'fn [] body)))

(defmacro declare [sym] (list 'def sym nil))

(defn cat- [xys zs]
    (lazy-seq
        (let [xys (seq xys)]
            (if xys
                (cons (first xys) (cat- (rest xys) zs))
                (if zs
                    (cat- (first zs) (next zs)))))))

(defn concat
    ([] (lazy-seq nil))
    ([x] (lazy-seq x))
    ([x y]
        (lazy-seq
            (let [s (seq x)]
                (if s
                    (cons (first s) (concat (rest s) y))
                    y))))
    ([x y & zs]
        (cat- (concat x y) zs)))

(defn meta [obj] (. obj meta))

(defn var? [obj] (instance? lua/clue.Var obj))
(defn var-get [v] (. v (get)))

(defn dec [n] (- n 1))
(defn inc [n] (+ n 1))
(defn zero? [n] (= n 0))

(defn take [n coll]
    (cons
        (first coll)
        (if (not= n 1) (lazy-seq (take (dec n) (rest coll))))))

(defn take-while [pred coll]
    (lazy-seq
        (let [s (seq coll)]
            (if s
                (if (pred (first s))
                    (cons (first s) (take-while pred (rest s))))))))

(defn drop [n coll]
    (if (zero? n) coll (drop (dec n) (lazy-seq (rest coll)))))

(defn map [f coll]
    (lazy-seq
        (let [s (seq coll)]
            (if s
                (cons (f (first s)) (map f (rest s)))))))

(def *print* lua/print)

(defn pr [val] (*print* (pr-str val)))


(defmacro when
    [test & body]
    (list 'if test (cons 'do body)))

(defmacro when-not
    [test & body]
    (list 'if test nil (cons 'do body)))

(defmacro when-let
    [bindings & body]
    (let [form (bindings 0) test (bindings 1)]
        `(let [temp# ~test]
            (when temp#
                (let [~form temp#]
                    ~@body)))))

(defn symbolize-bindings [bindings]
    (if bindings
        (assoc (symbolize-bindings (next (next bindings))) `(syntax-quote ~(first bindings)) (second bindings))
        {}))

(defmacro binding [bindings & body]
    `(do
        (lua/clue.Var.push_bindings ~(symbolize-bindings (seq bindings)))
        (try
            ~@body
            (finally
                (lua/clue.Var.pop_bindings)))))
