(ns clue.core)

(def with-meta (fn [obj m] (. obj (with_meta m))))
(def meta (fn [obj] (. obj meta)))

(def type (fn [obj] (lua/clue.type obj)))
(def instance? (fn [cls, obj] (= cls (type obj))))

(def var? (fn [obj] (instance? lua/clue.Var obj)))
(def var-get (fn [v] (. v (get))))

(def dec (fn [n] (- n 1)))
(def inc (fn [n] (+ n 1)))
(def zero? (fn [n] (= n 0)))
(def not (fn [x] (if x false true)))

(def take (
    fn [n coll]
    (cons
        (first coll)
        (if (not= n 1) (lazy-seq (take (dec n) (rest coll)))))))

(def take-while
    (fn [pred coll]
        (lazy-seq
            (let [s (seq coll)]
                (if s
                    (if (pred (first s))
                        (cons (first s) (take-while pred (rest s)))))))))

(def drop
    (fn [n coll]
        (if (zero? n) coll (drop (dec n) (lazy-seq (rest coll))))))

(def map (fn [f coll]
    (lazy-seq
        (let [s (seq coll)]
            (if s
                (cons (f (first s)) (map f (rest s))))))))

(def pr (fn [val] (lua/print (pr-str val))))
