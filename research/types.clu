(ns types)

(def str (fn [& args] (. (. args (map to-string)) (concat))))

(def to-string (fn [o]
    (let [type (lua/type o)]
        (if (= type "table")
            (str "[" (. (. o (map to-string)) (concat " ")) "]")
            (if (= type "string")
                o
                (lua/tostring o))))))

(lua/print (to-string "hello"))
(lua/print (to-string 10))
(lua/print (to-string [1 2 "x" true [3 4]]))
(lua/print (str 1 2 [3] "x" 4))

(def str-seq (fn [seq] (if (next seq) (str (first seq) ", " (str-seq (rest seq))) (str (first seq)))))

(def fib (fn [a b] (lazy-seq (cons a (fib b (+ b a))))))

(lua/print (str-seq (cons "x" [])))

(lua/print (str-seq [43 54 65 76]))
(lua/print (str-seq (map dec [43 54 65 76])))

(lua/print (str-seq (take 20 (fib 1 1))))

(lua/print (str-seq (map (fn [x] (str "{" x "}")) (take 20 (fib 1 1)))))
